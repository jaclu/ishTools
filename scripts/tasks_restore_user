#!/bin/sh
#
# Copyright (c) 2021: Jacob.Lundqvist@gmail.com 2021-04-13
# License: MIT



#
# Fails if IT_SHELL is not installed.
#
ensure_user_shell_is_installed() {
    if [ "$IT_TASK_DISPLAY" = "1" ]; then
        test -x "$IT_SHELL" || error_msg "$IT_SHELL not found\n>>> Make sure it gets installed!<<<\n"
    else
        test -x "$IT_SHELL" || error_msg "INVALID SHELL: $IT_SHELL" 1
    fi   
}


task_restore_user() {
#	echo ">> IT_TASK_DISPLAY [$IT_TASK_DISPLAY]"
#	echo ">> IT_DISPLAY_NON_TASKS [$IT_DISPLAY_NON_TASKS]"
    msg_txt="Username: $IT_UNAME"
    IT_SHELL=${IT_SHELL:-/bin/ash}
    if [ "$IT_UNAME" != "" ]; then
        #
        # Ensure user is created
        #
        msg_2 "$msg_txt"
        if ! grep ^"$IT_UNAME" /etc/passwd > /dev/null ; then
            # ensure shadow and hence adduser is installed
            if [ "$IT_TASK_DISPLAY" -eq 1 ]; then
		msg_3 "Will be created"
		msg_3 "shell: $IT_SHELL"
		ensure_user_shell_is_installed
	    else
	        ensure_installed shadow "Adding shadow (provides useradd)"
		# we need to ensure the group exists, before using it in useradd
		# TODO: identidy a 501 group by name and delete it
		groupdel -g "$IT_UNAME" 2> /dev/null
		groupadd -g 501 "$IT_UNAME"
		#  sets uid & gid to 501, to match apples uid/gid on iOS mounts
		useradd -u 501 -g 501 -G wheel -m -s "$IT_SHELL" "$IT_UNAME"
		msg_3 "added: $IT_UNAME"
		msg_3 "shell: $IT_SHELL"
            fi
        else
            msg_3 "Already pressent"
	    current_shell=$(grep $IT_UNAME /etc/passwd | sed 's/:/ /g'|  awk '{ print $NF }')
	    if [ "$current_shell" != "$IT_SHELL" ]; then
		if [ "$IT_TASK_DISPLAY" = "1" ]; then
		    echo "Will change shell $current_shell -> $IT_SHELL"
		else
		    ensure_user_shell_is_installed
		    usermod -s $IT_SHELL $IT_UNAME
		    msg_3 "new shell: $IT_SHELL"
		fi
	    fi
        fi
        echo
	
   	#
	# Restore user home
	#
	if [ "$IT_HOME_DIR_TGZ" != "" ]; then
	    msg_txt="Restoration of /home/$IT_UNAME"
	    unpack_home_dir "$IT_UNAME" /home/"$IT_UNAME" "$IT_HOME_DIR_TGZ" "$IT_HOME_DIR_UNPACKED_PTR"
	fi
    elif [ "$IT_TASK_DISPLAY" = "1" ] && [ "$IT_DISPLAY_NON_TASKS" = "1" ]; then
        msg_2 "Will NOT create any user"
    fi
    echo
}


task_user_pw_reminder() {
    [ "$IT_TASK_DISPLAY" -eq 1 ] && return

    if [ "$IT_UNAME" != "" ] && [ "$(grep "$IT_UNAME":\!: /etc/shadow)" != "" ]; then
        echo "+------------------------------+"
        echo "|                              |"
        echo "|  Remember to set a password  |"
        echo "|  for your added user:        |"
        echo "|    sudo passwd $IT_UNAME"
        echo "|                              |"
        echo "+------------------------------+"
        echo
    fi
}



#==========================================================
#
#     main
#
#==========================================================

if test -z "$DEPLOY_PATH" ; then
    # Most likely not sourced...
    DEPLOY_PATH="$(dirname "$0")/.."               # relative
    DEPLOY_PATH="$( cd "$DEPLOY_PATH" && pwd )"  # absolutized and normalized
fi
. "$DEPLOY_PATH/scripts/extras/utils"


if [ "$IT_INITIAL_SCRIPT" = "" ]; then
    #
    # Since sourced mode cant be detected in a practiacl way under ash,
    # I use this workaround, first script is expected to set it, if set
    # script can assume to be sourced
    #
    IT_INITIAL_SCRIPT=1
    
    case "$1" in
	"-?"|"-h"|"--help")
	    echo "Env paramas"
	    echo "-----------"
	    echo "IT_UNAME$(test -z "$IT_UNAME" && echo ' - username to ensure exists' || echo =$IT_UNAME )"
	    echo "IT_SHELL$(test -z "$IT_SHELL" && echo ' - shell for username' || echo =$IT_SHELL )"
	    echo "IT_HOME_DIR_TGZ$(test -z "$IT_HOME_DIR_TGZ" && echo ' - unpack this tgz file if found' || echo =$IT_HOME_DIR_TGZ )"
	    echo "IT_HOME_DIR_UNPACKED_PTR$(test -z "$IT_HOME_DIR_UNPACKED_PTR" && echo ' -  Indicates home.tgz is unpacked' || echo =$IT_HOME_DIR_UNPACKED_PTR )"

	    echo
	    echo "IT_TASK_DISPLAY$(test -z "$IT_TASK_DISPLAY" && echo ' -  if 1 will only display what will be done' || echo =$IT_TASK_DISPLAY)"
	    echo "IT_DISPLAY_NON_TASKS$(test -z "$IT_DISPLAY_NON_TASKS" && echo ' -  if 1 will show what will NOT happen' || echo =$IT_DISPLAY_NON_TASKS)"
	    ;;
	*)
	    task_restore_user
	    task_user_pw_reminder
    esac
fi
