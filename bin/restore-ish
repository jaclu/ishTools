#!/bin/sh
#
#
# Release: X
#
#
#
#
#
#
#
#
#
# Copyright (c) 2021: Jacob.Lundqvist@gmail.com 2021-03-07
# License: MIT
# Version: 0.3.0f 2021-03-07
#                Major cleanup, moving some stuff, expanding the README.md
#          0.2.11 2021-03-01
#                Uninstalls fortune on AOK - not my thing :)
#                Made the reminder to set a password for the added user
#                stand out more.
#          0.2.9  2021-02-23
#                Simplified TZ assignment
#          0.2.8  2021-02-23
#                Fixed bug in timezone handling
#                Check to prevent repeated sshd activation in AOK
#          0.2.7  2021-02-22
#                added apk shaddow - needed on FS ish for useradd
#          0.2.6  2021-02-22
#                Now using useradd to create user
#                Adding patch feature, so you dont need to retar
#                home dirs for minor changes, until next tar use
#                the patch to correct the issue
#          0.2.5  2021-02-22
#                Setting up sshd as a boot time service on ish FS
#                printing a reminder if the added user has no password
#          0.2.4  2021-02-22
#                Setting timezone to CET (Amsterdam)
#          0.2.3  2021-02-22
#                Setting shell to /bin/ash for $my_uname
#          0.2.2  2021-02-21
#                Added a lot of features, including sshd host keys if found.
#                Correctly identifies if the system is using AOK filesystem
#                And adjusts procedure accordingly
#          0.1.0  2021-01-31
#                Initial release, I am using it and it seems to do its thing
#
#
# This is a turn-key setup of a fresh iSH into a useable state
# Even if you do not have any homedirs to restore, this can be used to set the
# environment up to your likings, look at the settings bellow, anything
# that you do now wan't to bother with, just comment that variable out.
#
# Works both on AppStore and TestFlight iSH
# and both with default and AOK filesystems
#
# Copy it outside the iSH filesystem in order for it to survive a
# delete - install cycle. I use: mount -t ios . /mnt
# and then select a dir on iCloud, so I can get all my various devices
# restored from the same source. But im sure there are other ways to do it.
#
# Any feedback / bug reports welcome!
#


#
# Set this to empty if you dont want to set timezone
# Content should be in tz database format, so typically
# Continent/Major_City or a two/three letter acronymn like UTC
#
time_zone="Europe/Amsterdam"


#
# Set to 0 if you dont want to run sshd automatically at boot
#
activate_sshd_service=1


#
# Set theese if you want to restore /root
#
home_root=/mnt/files/tars/home_root.tgz
# a radnom something, indicating this has already been deployed
home_root_unpacked_ptr=/root/.local


#
# If empty no user env will be created
#
my_uname="jaclu"
#my_shell="/bin/bash"

#
# Set this if you want to restore your homedir
#
my_home_dir=/mnt/files/tars/home_${my_uname}.tgz
# a radnom something, indicating this has already been deployed
my_home_dir_unpacked_ptr=/home/${my_uname}/.shell_envs_cfg


#
# Some stuff I don't want to put in githbub :)
# set it to empty if you don't need it.
#
extra_tasks=/mnt/private/additional-restore-tasks


#
# If not set to 1 taks that will not be done, will not be listed
# when task_display_config() displays what changess will be done.
#
display_non_tasks=1



###########################################################
#
#     Enf of settings
#
###########################################################


#
# Identifying name of this device
#
this_host=$(hostname)

#
# Where to find ssh host keys
#
ssh_host_keys=/mnt/specifics/${this_host}-ssh_host_keys.tgz


#==========================================================
#
#     Some general functions
#
#==========================================================

function replace_default_fs_inittab() {
    local cfg_file=/mnt/files/inittab-default-FS
    
    if [ "$FS" != "AOK" ]; then
	# Get rid of unused getty's
	if [ -f $cfg_file ]; then
	    cp  $cfg_file /etc/inittab
	    echo "---  using my /etc/inittab  ---"
	fi
    fi
}


function use_alpine_reopositories() {
    local cfg_file=/mnt/files/repositories
    
    if [ "$FS" != "AOK" ]; then
	# point to current Alpine repos
	if [ -f $cfg_file ]; then
	    cp $cfg_file /etc/apk
	    echo "---  using my /etc/apk/repositories  ---"
	fi
    fi
}


function display_config() {
    echo
    echo "/======================================================\\"
    echo "|                                                      |"
    echo "|       Displaying what tasks will be performed        |"
    echo "|                                                      |"
    echo "\\======================================================/"
    echo

    if [ $activate_sshd_service -eq 1 ]; then
	echo "sshd will be activated"
    elif [ $display_non_tasks -eq 1 ]; then
	echo "sshd will be disabled"
    fi

    if [ -f "$ssh_host_keys" ]; then
	echo "Will unpack ssh host keys from: $ssh_host_keys"
    elif [ $display_non_tasks -eq 1 ]; then
	echo "Will NOT touch ssh host keys"
    fi

    if [ "$home_root" != "" ] && [ "$FS" != "AOK" ]; then
        if [ "$home_root_unpacked_ptr" != "" ] && [ -r $home_root_unpacked_ptr ]; then
	    echo "Seems like /root has been restored already"
	else
	    echo "/root will be restored"
	fi
    elif [ $display_non_tasks -eq 1 ]; then
	echo "/root will NOT be restored"
    fi  
    
    if [ "$time_zone" != "" ]; then
	echo "timezone will be set to: $time_zone"
    elif [ $display_non_tasks -eq 1 ]; then
	echo "timezone will NOT be changed"
    fi
    
    if [ "$my_uname" != "" ]; then
	echo "User will be created if not pressent: $my_uname"
	if [ "$my_shell" != "" ]; then
	    echo "  using shell: $my_shell"
	fi
	if [ "$my_home_dir" != "" ]; then
            if [ "$my_home_dir_unpacked_ptr" != "" ] && [ -r $my_home_dir_unpacked_ptr ]; then
		echo "Seems like /home/$my_uname has been restored already"
	    else
		echo "/home/$my_uname will be restored"
	    fi
	elif [ $display_non_tasks -eq 1 ]; then
	    echo "/home/$my_uname will NOT be restored"
	fi
    elif [ $display_non_tasks -eq 1 ]; then
	echo "User will NOT be created"
    fi

    if [ "$extra_tasks" != "" ]; then
	echo "Extra task to be run:"
	echo "  $extra_tasks"
    elif [ $display_non_tasks -eq 1 ]; then
	echo "No extra task will be run"
    fi

    echo
    echo "Press Ctrl-C if you want to have more time to observe the changes that will be done."
    echo "Waiting 5 secs, in case you want to abort..."
    echo
    echo
    sleep 5
    echo "==>                    <=="
    echo "==>   Restore begins   <=="
    echo "==>                    <=="
    echo
}



#==========================================================
#
#     Restore tasks
#
#==========================================================

function task_aok_tweaks() {
    local prof_dbg=/tmp/profile.debug

    if [ "$FS" = "AOK" ]; then
	echo "===  Somme AOK tweaks   ==="
	# If this file isnt globaly writeable, you will get errors if you login
	# as somebody else...
	if [ -f $prof_dbg ]; then
	    echo "---  chmod 666 $prof_dbg  ---"
	    chmod 666 $prof_dbg
	fi
	# Just no....
	echo "---  uninstalling fortune  ---"
	apk del fortune fortune-doc
	echo
    fi
}


function task_replace_some_etc_files() {
    local cfg_file=/mnt/files/hosts

    echo "===  Copying some files to /etc  ==="
    # If the config file is not found, no action will be taken
    
    # Add my local hosts
    if [ -f $cfg_file ]; then
	cp $cfg_file  /etc
	echo "---  using my /etc/hosts  ---"
    fi
    replace_default_fs_inittab
    use_alpine_reopositories
    echo
}


function task_update_upgrade() {
    echo "===  update & upgrade  ==="
    apk update && apk upgrade
    if [ $? -ne 0 ]; then
	echo
	echo "ERROR: Failed to update repos - network issue?"
	echo
	exit 1
    fi
    echo
}


function task_install_my_software() {
    echo "===  Installing my selection of software  ==="
    apk add coreutils openssh shadow sudo tmux mosh bash zsh git rsync emacs-nox joe
    echo
}


function task_timezone() {
    local tz_file=/usr/share/zoneinfo/$time_zone

    if [ "$time_zone" != "" ]; then
	echo "===  Setting timezone to $time_zone  ==="
	apk add tzdata 
	if [ -f "$tz_file" ]; then
	    cp  $tz_file /etc/localtime
	    # remove obsolete file
	    2> /dev/null rm /etc/timezone
	    echo "---  displaying time using: $time_zone  ---"
	    date
	else
	    echo
	    echo "***  BAD TIMEZONE: $time_zone  ***"
	    echo
	fi
	echo
    fi
}


function task_restore_ssh_host_keys() {
    echo "===  Using ssh host keys for: $this_host  ==="
    if [ -f "$ssh_host_keys" ]; then
	apk add openssh-client
	cd /etc/ssh
	2>/dev/null rm /etc/ssh/ssh_host_*
	tar xvfz $ssh_host_keys
    else
	echo
	echo "***  NOT FOUND: $ssh_host_keys"
	echo
    fi
    echo
}


function task_sshd() {
    if [ $activate_sshd_service -eq 1 ]; then
	echo "===  Making sure sshd will be running  ==="
	if [ "$FS" = "AOK" ]; then
	    if [ "$(2> /dev/null rc-status |grep sshd)" = "" ]; then
		echo "---  AOK enable_sshd  ---"
		enable_sshd
	    fi
	else
            apk add openssh-server openrc
            #rc-update add sshd
	    
            echo "---  Generating host keys if not restored, might take a while...  ---"
            ssh-keygen -A
            echo
	    
            echo "---  hacking sshd as a boot time service  ---"
            if [ "$(grep -i 'port 1022' /etc/ssh/sshd_config)" = "" ]; then
		echo "---  adding port 1022 to /etc/ssh/sshd_config  ---"
  		echo "Port 1022" >> /etc/ssh/sshd_config
            fi
            if [ "$(grep sshd /etc/inittab)" = "" ]; then
		echo "---  adding sshd restart to /etc/inittab  ---"
		echo "::sysinit:/etc/init.d/sshd restart" >> /etc/inittab
            fi
	    echo "==>                                  <=="
            echo "==>  sshd will start on next reboot  <=="
	    echo "==>                                  <=="
            echo
	fi
    else
	echo "===  Disabling sshd  ==="
	if [ "$FS" = "AOK" ] && [ "$(2> /dev/null rc-status |grep sshd)" != "" ]; then
            echo "---  AOK disable_sshd  ---"
            disable_sshd
	else
            if [ "$(grep sshd /etc/inittab)" != "" ]; then
		echo "---  default FS disable sshd  ---"
		apk del openssh-server openssh-sftp-server
		replace_default_fs_inittab
		killall sshd
	    fi
	    
	fi
    fi
    echo  
}


function task_nopasswd_sudo() {
    echo "===  Ensure no-pw sudo for group wheel is active  ==="
    grep restore-ish /etc/sudoers > /dev/null
    if [ $? -eq 1 ]; then
	echo "---  adding %wheel NOPASSWD to /etc/sudoers  --"
	echo "%wheel ALL=(ALL) NOPASSWD: ALL # added by restore-ish" >> /etc/sudoers
    fi
    echo
}


function task_restore_root_home() {
    if [ "$FS" != "AOK" ]; then
	echo "===  Considering restoration of /root  ==="
	if [ "$home_root" != "" ]; then
            if [ "$home_root_unpacked_ptr" != "" ] && [ -r $home_root_unpacked_ptr ]; then
		echo "---  Seems like /root has been restored already  ---"
            else
		if [ -f "$home_root" ]; then
                    echo "---  Found a tarball, unpacking it  ---"
                    cd /
                    tar xfz $home_root
		fi
            fi
	fi
	echo
    fi
}


function task_restore_user() {
    local user_shell=${my_shell:-/bin/ash}
    
    if [ "$my_uname" != "" ]; then
	echo "===  Restore user $my_uname  ==="
	grep $my_uname /etc/passwd > /dev/null
	if [ $? -eq 1 ]; then
            echo "---  adding user $my_uname  ---"
	    echo "---  shell: $user_shell  ---"
	    if [ ! -x $user_shell ]; then
		echo
		echo "***  INVALID SHELL: $user_shell"
		echo
		exit 1
	    fi
            useradd -m -G wheel -s $user_shell $my_uname
	else
	    echo "---  user $my_uname already pressent ---"
	fi
	echo
	
	if [ "$my_home_dir" != "" ]; then
	    echo "===  Considering restoration of /home/$my_uname  ==="
            if [ "$my_home_dir_unpacked_ptr" != "" ] && [ -r $my_home_dir_unpacked_ptr ]; then
		echo "---  Seems like /home/$my_uname was already restored  ---"
            else
		if [ -f "$my_home_dir" ]; then
                    echo "---  Found a tarball, unpacking it  ---"
                    cd /home
                    tar xfz $my_home_dir
		else
		    echo
		    echo "***  my_home_dir not found ($my_home_dir) not found!  ***"
		    echo
		fi
            fi
	    echo
	fi
    fi
}


function task_do_patching() {    
    local patch_file=/mnt/patches/task
    
    if [ -r $patch_file ]; then
	echo "===  found a patch file  ==="
	$patch_file
	echo
    fi
}


function task_do_extra_tasks() {
    if [ "$extra_tasks" != "" ]; then
	if [ -x $extra_tasks ]; then
	    echo "===  Running additional local restore tasks  ==="
	    echo
	    . $extra_tasks
	else
	    echo
	    echo "***  extra_tasks ($extra_tasks) not executable  ***"
	    echo
	fi
	
    else
	echo "===  No extra tasks requested  ==="
    fi
    echo
}


function task_user_pw_reminder() {

    if [ "$my_uname" != "" ] && [ "$(grep $my_uname:\!: /etc/shadow)" != "" ]; then
	echo
	echo "+------------------------------+"
	echo "|                              |"
	echo "|  Remember to set a password  |"
	echo "|  for your added user:        |"
	echo "|    sudo passwd $my_uname"
	echo "|                              |"
	echo "+------------------------------+"
    fi
}



#==========================================================
#
#     Main
#
#==========================================================

# 
#  Identify fiilesystem, a lot of other tassks depend on it,
# so should always
#
if [ -d /AOK ]; then
    FS='AOK'
    echo "Assuming this is an AOK file system"
else
    FS='iSH'
    echo "Assuming this is a regular iSH file system"
fi
echo

# Should not be disabled normally
display_config

#
# For testing/debugging any of theese tasks can be commented out
# without any side effects
#
task_aok_tweaks
task_replace_some_etc_files
task_update_upgrade
task_install_my_software
task_timezone
task_restore_ssh_host_keys
task_sshd
task_nopasswd_sudo
task_restore_root_home
task_restore_user
task_do_patching
task_do_extra_tasks
task_user_pw_reminder

echo
echo "All done, system is restored!"
