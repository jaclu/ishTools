#!/bin/sh
#
# Copyright (c) 2021: Jacob.Lundqvist@gmail.com 2021-02-28
# License: MIT
# Version: 0.2.10 2021-02-28
#                Uninstalls fortune on AOK - not my thing :)
#                Made the reminder to set a password for the added user
#                stand out more.
#          0.2.9  2021-02-23
#                Simplified TZ assignment
#          0.2.8  2021-02-23
#                Fixed bug in timezone handling
#                Check to prevent repeated sshd activation in AOK
#          0.2.7  2021-02-22
#                added apk shaddow - needed on FS ish for useradd
#          0.2.6  2021-02-22
#                Now using useradd to create user
#                Adding patch feature, so you dont need to retar
#                home dirs for minor changes, until next tar use
#                the patch to correct the issue
#          0.2.5  2021-02-22
#                Setting up sshd as a boot time service on ish FS
#                printing a reminder if the added user has no password
#          0.2.4  2021-02-22
#                Setting timezone to CET (Amsterdam)
#          0.2.3  2021-02-22
#                Setting shell to /bin/ash for $my_uname
#          0.2.2  2021-02-21
#                Added a lot of features, including sshd host keys if found.
#                Correctly identifies if the system is using AOK filesystem
#                And adjusts procedure accordingly
#          0.1.0  2021-01-31
#                Initial release, I am using it and it seems to do its thing
#
#
# This is a turn-key restore of a fresh iSH back to a useable state
#
# Works both on AppStore and TestFlight iSH
#
# copy it outside the iSH filesystem in order for it to survive a delete - install cycle
# I use mount -t ios . /mnt
# and then select a dir on iCloud, so I can get all my various device restored from the same source.
# But im sure there are other ways to do it.
#
# Any feedback / bug reports welcome!
#


#
# Set to 0 if you dont want to run sshd automatically
# at boot, this is ignored if this is a AOK filesystem
#
activate_sshd_service=1


#
# If empty no user env will be restored
#
my_uname="jaclu"


#
# Some stuff I don't want to put in githbub :)
# set it to empty if you don't need it.
#
extra_tasks=/mnt/bin/additional-restore-tasks


#
# Set theese if you want to restore home dirs
#
home_root=/mnt/files/tars/home_root.tgz
# a radnom something, indicating this has already been deployed
home_root_unpacked_ptr=/root/.local

home_mine=/mnt/files/tars/home_${my_uname}.tgz
# a radnom something, indicating this has already been deployed
home_mine_unpacked_ptr=/home/${my_uname}/.shell_envs_cfg



#==========================================================
#
#  Variables from here on are set by the system
#
#==========================================================


#
# Identifying current environ
#
this_host=$(hostname)

if [ -d /AOK ]; then
    FS='AOK'
    echo "Assuming this is an AOK file system"
else
    FS='iSH'
    echo "Assuming this is a regular iSH file system"
fi
echo


echo "===  Copying some files to /etc  ==="
# Add my local hosts
cp /mnt/files/hosts /etc
echo "---  /etc/hosts  ---"
if [ "$FS" != "AOK" ]; then
    # point to Alpine 3.12
    cp /mnt/files/repositories /etc/apk
    echo "---  /etc/apk/repositories  ---"

    # Get rid of unused getty's
    cp /mnt/files/inittab /etc
    echo "---  /etc/inittab  ---"
fi
echo


echo "===  update & upgrade  ==="
apk update && apk upgrade
if [ $? -ne 0 ]; then
    echo
    echo "ERROR: Failed to update repos - network issue?"
    echo
    exit 1
fi
echo


if [ "$FS" = "AOK" ]; then
    echo "===  Somme AOK tweaks, that are reverible and non-destructive   ==="
    prof_dbg=/tmp/profile.debug
    if [ -f $prof_dbg ]; then
	echo "---  chmod 666 $prof_dbg  ---"
	chmod 666 $prof_dbg
    fi
    # Just no....
    apk del fortune fortune-doc
fi
echo


echo "===  Installing my selection of software  ==="
apk add coreutils openssh shadow sudo tmux mosh bash zsh git rsync emacs-nox joe
echo


if [ "$(date |grep CET)" = "" ]; then
    echo "===  Setting timezone to CET (Amsterdam)  ==="
    apk add tzdata
    if [ "$FS" = "AOK" ]; then
    	cp /usr/share/zoneinfo/Europe/Amsterdam /etc/localtime
    	2> /dev/null rm /etc/timezone

    	# Not needed unless when you change tz, but I will leave it in for now...
    	#apk del tzdata
    fi 
    echo
fi


echo "===  Unpacking sshd host keys for: $this_host  (if found)  ==="
sshd_host_keys=/mnt/specifics/${this_host}-sshd_host_keys.tgz
if [ -f "$sshd_host_keys" ]; then
    cd /etc/ssh
    tar xvfz $sshd_host_keys
fi
echo


if [ $activate_sshd_service -eq 1 ]; then
    echo "===  Making sure sshd will be running  ==="
    if [ "$FS" = "AOK" ]; then
	if [ "$(2> /dev/null rc-status |grep sshd)" = "" ]; then
            echo "---  AOK enable_sshd  ---"
            enable_sshd
	fi
    else
        apk add openrc
        #rc-update add sshd

        echo "---  Generating host keys if not restored, might take a while...  ---"
        ssh-keygen -A
        echo

        echo "---  hacking sshd as a boot time service  ---"
        if [ "$(grep -i 'port 1022' /etc/ssh/sshd_config)" = "" ]; then
	    echo "---  adding port 1022 to /etc/ssh/sshd_config  ---"
  	    echo "Port 1022" >> /etc/ssh/sshd_config
        fi
        if [ "$(grep sshd /etc/inittab)" = "" ]; then
	    echo "---  adding sshd restart to /etc/inittab  ---"
            echo "::sysinit:/etc/init.d/sshd restart" >> /etc/inittab
        fi
        echo "-->  sshd will start on next reboot  <--"
        echo
    fi
    echo
fi


echo "===  Ensure no-pw sudo for group wheel is active  ==="
grep restore-ish /etc/sudoers > /dev/null
if [ $? -eq 1 ]; then
    echo "---  adding %wheel NOPASSWD to /etc/sudoers  --"
    echo "%wheel ALL=(ALL) NOPASSWD: ALL # added by restore-ish" >> /etc/sudoers
fi
echo


if [ "$FS" != "AOK" ]; then
    echo "===  Considering restoration of /root  ==="
    if [ "$home_root" != "" ]; then
        if [ "$home_root_unpacked_ptr" != "" ] && [ -r $home_root_unpacked_ptr ]; then
            echo "---   Seems like /root has been restored already   ---"
        else
            if [ -f "$home_root" ]; then
                echo "---   Found a tarball, unpacking it   ---"
                cd /
                tar xfz $home_root
            fi
        fi
    fi
    echo
fi


if [ "$my_uname" != "" ]; then
    echo "===  Restoring $my_uname  ==="
    grep $my_uname /etc/passwd > /dev/null
    if [ $? -eq 1 ]; then
        echo "---  adding user $my_uname  --"
        useradd -m -G wheel -s /bin/ash $my_uname
        # This adds no pw sudo
        #addgroup $my_uname wheel
    fi
    echo

    echo "===  Considering restoration of /home/$my_uname  ==="
    if [ "$home_mine" != "" ]; then
        if [ "$home_mine_unpacked_ptr" != "" ] && [ -r $home_mine_unpacked_ptr ]; then
            echo "---   Seems like /home/$my_uname has been restored already   ---"
        else
            if [ -f "$home_mine" ]; then
                echo "---   Found a tarball, unpacking it   ---"
                cd /home
                tar xfz $home_mine
            fi
        fi
    fi
    echo
    
    patch_file=/mnt/patches/task
    if [ -r $patch_file ]; then
	echo "===  found a patch file  ==="
	$patch_file
	echo
    fi
fi


if [ -x $extra_tasks ]; then
    echo "===  Running additional local restore tasks  ==="
    echo
    . $extra_tasks
    echo
else
    echo "===  No extra tasks requested  ==="
    echo
fi


if [ "$my_uname" != "" ] && [ "$(grep $my_uname:\!: /etc/shadow)" != "" ]; then
    echo
    echo "+------------------------------+"
    echo "|                              |"
    echo "|  Remember to set a password  |"
    echo "|  for your added user:        |"
    echo "|    sudo passwd $my_uname     |"
    echo "|                              |"
    echo "+------------------------------+"
fi


echo
echo "All done, system is restored!"
